{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","i","key","id","SearchBar","term","location","sortBy","sortByOptions","bestMatch","highestRated","mostReviewed","handleTermChange","bind","handleLocationChange","handleSearch","shortByOption","setState","evt","target","value","preventDefault","searchYelp","Object","keys","sortByOption","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","href","Yelp","search","fetch","headers","Authorization","then","resp","json","jsonResponse","console","log","image_url","address1","zip_code","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86217123.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='Business'>\r\n        <div className='image-container'>\r\n          <img src={this.props.business.imageSrc} alt='restaurant' />\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className='Business-information'>\r\n          <div className='Business-address'>\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>\r\n              {this.props.business.state} {this.props.business.zipCode}\r\n            </p>\r\n          </div>\r\n          <div className='Business-reviews'>\r\n            <h3>{this.props.business.category}</h3>\r\n            <h3 className='rating'>{this.props.business.rating}</h3>\r\n            <p>{this.props.business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='BusinessList'>\r\n        {this.props.businesses.map((business, i) => {\r\n          return <Business key={business.id} business={business}></Business>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList","import React from 'react';\r\nimport './SearchBar.css'\r\n\r\n// const SORT_BY_OPTIONS = {\r\n \r\n// };\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: '',\r\n      location: '',\r\n      sortBy: 'best_match'\r\n    };\r\n\r\n    this.sortByOptions = { bestMatch: 'best_match', highestRated: 'rating', mostReviewed: 'review_count' };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this)\r\n  }\r\n\r\n  getSortByClass(shortByOption) {\r\n    return this.state.sortBy === shortByOption ? 'active' : '';\r\n  }\r\n\r\n  handleSortByChange(shortByOption) {\r\n    this.setState({\r\n      sortBy: shortByOption,\r\n    });\r\n  }\r\n\r\n  handleTermChange(evt) {\r\n    this.setState({\r\n      term: evt.target.value,\r\n    })\r\n  }\r\n\r\n  handleLocationChange(evt) {\r\n    this.setState({\r\n      location: evt.target.value\r\n    })\r\n  }\r\n\r\n  handleSearch(evt) {\r\n    evt.preventDefault(evt)\r\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    \r\n  }\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className='SearchBar'>\r\n        <div className='SearchBar-sort-options'>\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className='SearchBar-fields'>\r\n          <input onChange={this.handleTermChange} placeholder='Search Businesses' />\r\n          <input onChange={this.handleLocationChange} placeholder='Where?' />\r\n        </div>\r\n        <div className='SearchBar-submit'>\r\n          <a onClick={this.handleSearch} href=\"/\" >Let's Go</a>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","/* \r\nClient ID\r\nsoQg3AL4oM9p-dVjcDes3w\r\n*/\r\n\r\nconst APIKey = 'fpyuh-Hh4Hojh6mtZ8CuimOr8WARtBZrTghXwdXB1qhBKu4330tWdstBbEcYOkidAdpUUGMyD4eY_8L7dDNCL56Pj_9PuSLTo1mBh8AaAo5S_-6xBRfCzT3n3F1sX3Yx';\r\n\r\n const Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${APIKey}`\r\n      }\r\n    }).then((resp) => {\r\n      \r\n      return resp.json()\r\n    }).then((jsonResponse) => {\r\n      \r\n      if (jsonResponse.businesses) {\r\n        console.log(jsonResponse.businesses)\r\n        return jsonResponse.businesses.map((business) => {\r\n          return {\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.category,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count,\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default Yelp\r\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    }\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      console.log('App resp', businesses)\n      this.setState({\n        businesses:businesses\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}></SearchBar>\n        <BusinessList businesses={this.state.businesses}></BusinessList>\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}