{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","alt","this","props","business","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","i","key","SearchBar","term","location","sortBy","sortByOptions","bestMatch","highestRated","mostReviewed","shortByOption","setState","Object","keys","sortByOption","sortByOptionValue","getSortByClass","onClick","handleSortByChange","bind","renderSortByOptions","placeholder","href","BUSINESS","imageSrc","BUSINESSES","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAgCeA,G,mLAzBX,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAI,gFAAgFC,IAAI,MAE/F,4BAAKC,KAAKC,MAAMC,SAASC,MACzB,yBAAKN,UAAU,wBACb,yBAAKA,UAAU,oBACb,2BAAIG,KAAKC,MAAMC,SAASE,SACxB,2BAAIJ,KAAKC,MAAMC,SAASG,MACxB,2BACGL,KAAKC,MAAMC,SAASI,MADvB,IAC+BN,KAAKC,MAAMC,SAASK,UAGrD,yBAAKV,UAAU,oBACb,4BAAKG,KAAKC,MAAMC,SAASM,UACzB,wBAAIX,UAAU,UAAUG,KAAKC,MAAMC,SAASO,QAC5C,2BAAIT,KAAKC,MAAMC,SAASQ,YAAxB,mB,GAnBWC,IAAMC,YCWdC,E,uKAVX,OACE,yBAAKhB,UAAU,gBACZG,KAAKC,MAAMa,WAAWC,KAAI,SAACb,EAAUc,GACpC,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAGd,SAAUA,Y,GALlBS,IAAMC,WCqDlBM,G,wDAjDb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXa,KAAM,GACNC,SAAU,GACVC,OAAQ,cAGV,EAAKC,cAAgB,CAAEC,UAAW,aAAcC,aAAc,SAAUC,aAAc,gBARrE,E,2DAWJC,GACb,OAAO1B,KAAKM,MAAMe,SAAWK,EAAgB,SAAW,K,yCAGvCA,GACjB1B,KAAK2B,SAAS,CACZN,OAAQK,M,4CAGW,IAAD,OACpB,OAAOE,OAAOC,KAAK7B,KAAKsB,eAAeP,KAAI,SAACe,GAC1C,IAAIC,EAAoB,EAAKT,cAAcQ,GAC3C,OACE,wBAAIjC,UAAW,EAAKmC,eAAeD,GAAoBd,IAAKc,EAAmBE,QAAS,EAAKC,mBAAmBC,KAAK,EAAMJ,IACxHD,Q,+BAOP,OACE,6BAASjC,UAAU,aACjB,yBAAKA,UAAU,0BACb,4BAAKG,KAAKoC,wBAEZ,yBAAKvC,UAAU,oBACb,2BAAOwC,YAAY,sBACnB,2BAAOA,YAAY,YAErB,yBAAKxC,UAAU,oBACb,uBAAGyC,KAAK,KAAR,kB,GA3Cc3B,IAAMC,YCDxB2B,EAAW,CACfC,SAAU,gFACVrC,KAAM,sBACNC,QAAS,sBACTC,KAAM,aACNC,MAAO,KACPC,QAAS,QACTC,SAAU,UACVC,OAAQ,IACRC,YAAa,IAGT+B,EAAa,CAACF,EAAUA,EAAUA,EAAUA,EAAUA,EAAUA,GAYvDG,MAVf,WACE,OACE,yBAAK7C,UAAU,OACb,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAciB,WAAY2B,MCbZE,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c892215.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='Business'>\r\n        <div className='image-container'>\r\n          <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt='' />\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className='Business-information'>\r\n          <div className='Business-address'>\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>\r\n              {this.props.business.state} {this.props.business.zipCode}\r\n            </p>\r\n          </div>\r\n          <div className='Business-reviews'>\r\n            <h3>{this.props.business.category}</h3>\r\n            <h3 className='rating'>{this.props.business.rating}</h3>\r\n            <p>{this.props.business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='BusinessList'>\r\n        {this.props.businesses.map((business, i) => {\r\n          return <Business key={i} business={business}></Business>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList","import React from 'react';\r\nimport './SearchBar.css'\r\n\r\n// const SORT_BY_OPTIONS = {\r\n \r\n// };\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: '',\r\n      location: '',\r\n      sortBy: 'best_match'\r\n    };\r\n\r\n    this.sortByOptions = { bestMatch: 'best_match', highestRated: 'rating', mostReviewed: 'review_count' };\r\n  }\r\n\r\n  getSortByClass(shortByOption) {\r\n    return this.state.sortBy === shortByOption ? 'active' : '';\r\n  }\r\n\r\n  handleSortByChange(shortByOption) {\r\n    this.setState({\r\n      sortBy: shortByOption,\r\n    });\r\n  }\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className='SearchBar'>\r\n        <div className='SearchBar-sort-options'>\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className='SearchBar-fields'>\r\n          <input placeholder='Search Businesses' />\r\n          <input placeholder='Where?' />\r\n        </div>\r\n        <div className='SearchBar-submit'>\r\n          <a href='#'>Let's Go</a>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nconst BUSINESS = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\n\nconst BUSINESSES = [BUSINESS, BUSINESS, BUSINESS, BUSINESS, BUSINESS, BUSINESS];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar></SearchBar>\n      <BusinessList businesses={BUSINESSES}></BusinessList>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}